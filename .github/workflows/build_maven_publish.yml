# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Build package with Maven and publish as container image to GitHub Packages

on:
  workflow_call:
    inputs:
      tomcat_root_context:
        description: 'Whether to use root context in Tomcat docker image'
        required: false
        default: false

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    outputs:
      app_version: ${{ steps.version.outputs.image_tag }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Package with Maven
      run: mvn clean package

    - name: Check the built files
      run: |
        ls -la 
        ls -la target/
        find . -type f -name *war*

    - name: Generate version
      id: version
      run: echo ::set-output name=image_tag::${GITHUB_RUN_ID}-${GITHUB_SHA}

    # - name: Build container image
    #   run: mvn docker:build

    # # Extract artifact name out from pom.xml project file
    # - name: Get image name
    #   id: image_name
    #   run: echo ::set-output name=image_name::$(echo '${project.groupId}/${project.artifactId}' | mvn -N -q -DforceStdout help:evaluate )

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      if: github.event_name != 'pull_request'
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          ${{ steps.version.outputs.image_tag }}
          type=ref,event=branch
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

    # Use generic Dockerfile for all builds
    - name: Create Dockerfile
      run: |
        cat > Dockerfile <<'EOF'
        FROM tomcat:9.0-jre11-openjdk-slim-bullseye

        ARG WAIT_TIMEOUT
        ARG PORT

        ENV WAIT_TIMEOUT ${WAIT_TIMEOUT:-'60s'}
        ENV PORT ${PORT:-8080}

        RUN addgroup --gid 1000 www-group && adduser --system --disabled-password --gecos "" --gid 1000 --uid 1000 www-user
        RUN chown -hR 1000:1000 ${CATALINA_HOME}

        EXPOSE ${PORT}
        EOF

        if [ "${TOMCAT_ROOT_CTX}" = true ]; then
        cat >> Dockerfile <<'EOF'

        COPY --chown=1000:root target/*.war ${CATALINA_HOME}/webapps/ROOT.war

        EOF
        else
        cat >> Dockerfile <<'EOF'
        
        COPY --chown=1000:root target/*.war ${CATALINA_HOME}/webapps/

        EOF
        fi

        cat >> Dockerfile <<'EOF'
        USER 1000

        CMD ["catalina.sh", "run"]
        EOF
      env:
        TOMCAT_ROOT_CTX: ${{ inputs.tomcat_root_context }}

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      id: build-and-push
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
