# This workflow will deploy a container image from Github Packages container registry
# to a Kubernetes cluster by means of Flux GitOps toolkit

name: Deploy to Kubernetes (Flux)

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name to be deployed'
        required: true
        type: string
      app_version:
        description: 'Application version to be deployed'
        required: true
        type: string
      app_ks_path:
        description: 'Path to kustomization file where deployment image version is to be updated'
        required: true
        type: string
      flux_ks:
        description: 'Flux kustomization deployment belongs to'
        required: true
        type: string
      flux_repo:
        description: 'Flux repository for cluster management'
        required: true
        type: string
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  deploy:
    runs-on: ubuntu-latest 

    timeout-minutes: 30

    steps:
      - name: Install Flux
        run: curl -s https://fluxcd.io/install.sh | sudo bash

      - name: Checkout Flux repo
        uses: actions/checkout@master
        with:
          ref: main
          repository: ${{ github.repository_owner }}/${{ inputs.flux_repo }}
          token: ${{ secrets.TOKEN_RW }}

      - name: Update application version
        run: | 
          yq --version
          export APP_NAMESPACE=$(basename $(dirname ${APP_KS_PATH}))
          echo 'Working with kustomization file:'
          ls ${APP_KS_PATH}
          # convert IMAGE_REPO to lowercase manually, no native support inside github expressions
          # ref: https://github.com/github/feedback/discussions/10553
          export IMAGE_REPO_LOWER=${IMAGE_REPO,,}
          echo "Image repo is ${IMAGE_REPO_LOWER}"
          echo "New app version is ${APP_VERSION}"
          echo 'Before changes:'
          yq '.images[] | select(.name == env(IMAGE_REPO_LOWER))' ${APP_KS_PATH}
          yq -i '(.images[] | select(.name == env(IMAGE_REPO_LOWER))).newTag = env(APP_VERSION)' ${APP_KS_PATH}
          echo 'After changes:'
          yq '.images[] | select(.name == env(IMAGE_REPO_LOWER))' ${APP_KS_PATH}

          # Make a git commit
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git status
          git blame ${APP_KS_PATH}
          git add ${APP_KS_PATH}
          git commit -m "Update $APP_NAME to version $APP_VERSION at $APP_NAMESPACE namespace"
          git status
          git push origin main
        env:
          IMAGE_REPO: ${{ env.REGISTRY }}/${{ github.repository }}
          APP_VERSION: ${{ inputs.app_version }}
          APP_KS_PATH: ${{ inputs.app_ks_path }}
          APP_NAME: ${{ inputs.app_name }}

      - name: Set target environment secret name
        id: env_secret
        run: |
          SECRET_NAME="K8S_${ENV}_KUBECONFIG_B64"
          echo "::set-output name=kubeconfig_secret_name::${SECRET_NAME}"
        env:
          ENV: ${{ inputs.environment }}

      - name: Check deployment status in Kubernetes
        run: |
          echo ${B64_KUBECONFIG} | base64 -d > ${KUBECONFIG}
          kubectl config view
          flux reconcile source git flux-system
          flux reconcile ks ${FLUX_KS}
          kubectl rollout status deployment ${APP_NAME}
        env:
          B64_KUBECONFIG: ${{ secrets[steps.env_secret.outputs.kubeconfig_secret_name] }}
          KUBECONFIG: /tmp/kubeconfig
          APP_NAME: ${{ inputs.app_name }}
          FLUX_KS: ${{ inputs.flux_ks }}

      - name: Send Slack notification for build failure
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        uses: TBE-Entertainment/github-workflows/.github/actions/slack-notify@main
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}